"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_electricity_market_env.ipynb.

# %% auto 0
__all__ = ['ElectricityMarketEnv']

# %% ../nbs/00_electricity_market_env.ipynb 3
import gymnasium as gym
import numpy as np

# %% ../nbs/00_electricity_market_env.ipynb 5
class ElectricityMarketEnv(gym.Env):
    def __init__(self, env_config):
        # Environment Configuration
        self._battery_capacity = env_config['battery_capacity']
        self._config = env_config

        self.action_space = gym.spaces.Box(low=-self._battery_capacity, high=self._battery_capacity, shape=(1,), dtype=np.float32)
        self.observation_space = gym.spaces.Box(low=np.array([0, -5, 1]),
                                                high=np.array([10, 5, 3]),
                                                shape=(3,), dtype=np.float32)


    # State of Environment
        self._current_state_of_charge = env_config['init_state_of_charge']
        self._current_demand_of_electricity = env_config['init_current_demand_of_electricity']
        self._current_price = env_config['init_current_price']

    def _is_action_valid(self, action) -> bool:
        target_state_of_charge = self._current_state_of_charge + action
        return target_state_of_charge > self._battery_capacity or target_state_of_charge < 0

    def reset(self, seed=None, options=None):
        # We need the following line to seed self.np_random
        super().reset(seed=seed)

        self._current_state_of_charge = self._config['init_state_of_charge']
        self._current_demand_of_electricity = self._config['init_current_demand_of_electricity']
        self._current_price = self._config['init_current_price']

        observation = self._get_obs()
        return observation

    def _get_obs(self):
        return {
            "state_of_charge": self._current_state_of_charge,
            "demand_of_electricity": self._current_demand_of_electricity,
            "price": self._current_price,
        }

