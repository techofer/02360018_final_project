"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_electricity_market_env.ipynb.

# %% auto 0
__all__ = ['ElectricityMarketEnv']

# %% ../nbs/00_electricity_market_env.ipynb 3
import gymnasium as gym
import numpy as np

# %% ../nbs/00_electricity_market_env.ipynb 4
class ElectricityMarketEnv(gym.Env):
    def __init__(self, env_config):
        # Environment Configuration
        self._battery_capacity = env_config['battery_capacity']
        self._config = env_config

        self.action_space = gym.spaces.Box(low=-self._battery_capacity, high=self._battery_capacity, shape=(1,), dtype=np.float64)
        self.observation_space = gym.spaces.Box(low=np.array([0, 0, 0]),
                                                high=np.array([self._battery_capacity, np.inf, np.inf]),
                                                shape=(3,), dtype=np.float64)


        # State of Environment
        self._current_state_of_charge = env_config['init_state_of_charge']
        self._timestep = 0
        self._current_state_of_charge = self._init_state_of_charge
        self._battery_efficiency = 0.95
        self._battery_degradation = 0.999

        self._battery_capacity = env_config.get('battery_capacity', 100)
        self._init_state_of_charge = env_config.get('init_state_of_charge', 50)
        self._config = env_config
        self._timestep = 0
        self._max_timesteps = env_config.get('max_timesteps', 24)


    def _is_action_valid(self, action) -> bool:
        target_state_of_charge = self._current_state_of_charge + action
        return 0 < target_state_of_charge < self._battery_capacity

    def step(self, action):
        self._timestep += 1
        done = self._timestep >= self._max_timesteps
        truncated = False
        demand = self._demand_of_electricity()
        price = self._price()
        if action == 1:  # Charge
            charge_amount = min(self._battery_capacity - self._current_state_of_charge, 10)  # Charge max 10 units
            self._current_state_of_charge += charge_amount * self._battery_efficiency
        elif action == 2:  # Discharge
            discharge_amount = min(self._current_state_of_charge, 10)  # Discharge max 10 units
            self._current_state_of_charge -= discharge_amount / self._battery_efficiency

        self._battery_capacity *= self._battery_degradation
        reward = self._calculate_reward(action, demand, price)
        return self._get_obs(), reward, done, truncated, {}

    def _calculate_reward(self, action, demand, price):
        """ Reward function considering price, demand, battery health, and grid stability. """
        reward = 0
        if action == 2:  # Discharging (selling)
            if price > 50:  # High price threshold
                reward += price * 2  # Encourage selling at high price
            else:
                reward -= 5  # Penalty for selling at low price
        if action == 1:  # Charging
            if price < 30:  # Low price threshold
                reward += 5  # Encourage buying at low price
            else:
                reward -= price / 10  # Discourage buying at high prices
        if self._current_state_of_charge < 20 or self._current_state_of_charge > 80:
            reward -= 10  # Encourage keeping SoC within [20, 80] range
        if demand > 0 and action != 2:  # Prefer using battery energy for demand first
            reward += 10

        return reward


    def _demand_of_electricity(self):
        base_demand = 100 + 50 * np.sin((self._timestep / self._max_timesteps) * 2 * np.pi)  # Cyclical demand
        noise = np.random.normal(0, 10)  # Random noise
        return max(0, base_demand + noise)


    def _price(self):
        """ Simulates electricity price changes based on demand and supply. """
        base_price = 30 + 50 * np.sin((self._timestep / self._max_timesteps) * 2 * np.pi)  # Cyclical price changes
        noise = np.random.normal(0, 5)  # Random price fluctuations
        return max(0, base_price + noise)

    def reset(self, *, seed=None, options=None):
        """ Resets the environment to the initial state. """
        super().reset(seed=seed)
        self._current_state_of_charge = self._init_state_of_charge
        self._timestep = 0
        return self._get_obs(), {}

    def _get_obs(self):
        """ Returns the current observation (state). """
        return np.array([
            self._current_state_of_charge,  # Battery SoC
            self._demand_of_electricity(),  # Current electricity demand
            self._price()  # Current market price
        ])








